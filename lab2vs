import copy
import math
import random
import time
import matplotlib.pyplot as plt
from statistics import mean

def load_instance(filename):
    vertices = []
    with open(filename, 'r') as f:
        data = f.readlines()
        data = data[6:-1]
    for line in data:
        vertices.append([int(v) for v in line.split()[1:]])
    return vertices


def get_second_vertex(first_vertex, distance_matrix):
    max_distance = max(distance_matrix[first_vertex])
    return distance_matrix[first_vertex].index(max_distance)


def create_distance_matrix(vertices):
    matrix = []
    for i in vertices:
        line = []
        for j in vertices:
            distance = round(math.sqrt((i[0] - j[0]) ** 2 + (i[1] - j[1]) ** 2))
            line.append(distance)
        matrix.append(line)
    return matrix


def calculate_score(vertices, distance_matrix, cycle=False):
    score = 0
    for i in range(len(vertices) - 1):
        score += distance_matrix[vertices[i]][vertices[i+1]]
    if cycle and len(vertices) > 2:
        score += distance_matrix[vertices[0]][vertices[-1]]
    return score


def get_best_insertion(vertices, vertices2, distance_matrix, position=True, cycle=False):
    best_vertex = None
    best_score = None
    best_position = None

    for i in range(len(distance_matrix)):
        if i in vertices + vertices2:
            continue
        for position in range(len(vertices) + 1):
            temp_vertices = copy.copy(vertices)
            temp_vertices.insert(position, i)
            score = calculate_score(temp_vertices, distance_matrix, cycle=True)
            if best_score is None or score < best_score:
                best_score = score
                best_vertex = i
                best_position = position

    return best_vertex, best_position, best_score


def greedy(distance_matrix, start_vertex=0):
    vertices1 = []
    vertices2 = []
    vertices1.append(start_vertex)
    vertices2.append(get_second_vertex(start_vertex, distance_matrix)) # wybieranie najdaljszego

    matrix_len = len(distance_matrix)

    for l in range(matrix_len - 2):
        if l % 2 == 0:
            vertices = vertices1
        else:
            vertices = vertices2
        best_vertex = None
        best_score = None
        index = None

        for i in vertices:
            for j in range(len(distance_matrix)):
                if i == j or j in vertices1 + vertices2:
                    continue
                score = distance_matrix[i][j]
                if best_score is None or score < best_score:
                    best_score = score
                    best_vertex = j

        vertices.append(best_vertex)
    return vertices1 + vertices1[:1], vertices2 + vertices2[:1]


def greedy_cycle(distance_matrix, start_vertex=0):
    vertices1 = []
    vertices1.append(start_vertex)
    vertices2 = []
    vertices2.append(get_second_vertex(start_vertex, distance_matrix))

    matrix_len = len(distance_matrix)

    for l in range(matrix_len - 2):
        if l % 2 == 0:
            vertices, vertices_2 = vertices1, vertices2
        else:
            vertices, vertices_2 = vertices2, vertices1
        best_vertex, best_position, _ = get_best_insertion(vertices, vertices_2, distance_matrix)
        vertices.insert(best_position, best_vertex)
    return vertices1 + vertices1[:1], vertices2 + vertices2[:1]


def regret_heuristics(distance_matrix, start_vertex=0):
    vertices1 = []
    vertices1.append(start_vertex)
    vertices2 = []
    vertices2.append(get_second_vertex(start_vertex, distance_matrix))

    matrix_len = len(distance_matrix)

    for l in range(matrix_len - 4):
        if l % 2 == 0:
            vertices, vertices_2 = vertices1, vertices2
        else:
            vertices, vertices_2 = vertices2, vertices1
        temp1 = copy.copy(vertices)
        temp2 = copy.copy(vertices)
        best_vertex_1, best_position_1, _ = get_best_insertion(temp1, vertices_2, distance_matrix)
        temp1.insert(best_position_1, best_vertex_1)
        best_vertex_2, best_position_2, _ = get_best_insertion(temp1, vertices_2, distance_matrix)
        temp1.insert(best_position_2, best_vertex_2)

        temp2.insert(best_position_2, best_vertex_2)
        temp2.insert(best_position_1, best_vertex_1)
        if calculate_score(temp2, distance_matrix) < calculate_score(temp1, distance_matrix):
            vertices.insert(best_position_2, best_vertex_2)
        else:
            vertices.insert(best_position_1, best_vertex_1)

    for i in range(matrix_len):
        if i not in vertices1 + vertices2:
            if len(vertices1) % 2 != 0:
                best_vertex, best_position, _ = get_best_insertion(vertices1, vertices2, distance_matrix)
                vertices1.insert(best_position, best_vertex)
            else:
                best_vertex, best_position, _ = get_best_insertion(vertices2, vertices1, distance_matrix)
                vertices2.insert(best_position, best_vertex)

    return vertices1 + vertices1[:1], vertices2 + vertices2[:1]


def swaping_vertex(vertices,x,y):
    result = []

    for i in range(len(vertices)):
        if vertices[i]==x:
            result.append(y)
        elif vertices[i]==y:
            result.append(x)
        else:
            result.append(vertices[i])

    return result


def swaping_edge(vertices,x,y):
    result = []
    id_x = vertices.index(x)
    id_y = vertices.index(y)

    for i in range(id_x+1):
        result.append(vertices[i])

    for i in range (id_y,id_x,-1):
        result.append(vertices[i])
    
    if(id_y<len(vertices)):
        for i in range(id_y+1,len(vertices)):
            result.append(vertices[i])


    return result


def swaping_cycle(vertices1,vertices2,x,y):
    result1 = []
    result2 = []
    for i in range(len(vertices1)):
        if vertices1[i]==x:
           result1.append(y)
        else:
            result1.append(vertices1[i])

    for i in range(len(vertices2)):
        if vertices2[i]==y:
           result2.append(x)
        else:
            result2.append(vertices2[i])
    return result1,result2


def steepest(vertices1,vertices2,distance):  
    result_f1 = copy.copy(vertices1)
    result_f2 = copy.copy(vertices2)
    score_f1 = calculate_score(vertices1,distance)
    score_f2=calculate_score(vertices2,distance)
    temp1=[]
    temp2=[]
    score=0
    helper=0
    for i in range(len(vertices1)):
        for j in range(len(vertices1)):

            temp1,temp2 = swaping_cycle(vertices1,vertices2,vertices1[i],vertices2[j])
            if calculate_score(temp1,distance) + calculate_score(temp2,distance) < score_f1 + score_f2:
                result_f1 = temp1
                result_f2 = temp2
                score_f1 = calculate_score(temp1,distance)
                score_f2 = calculate_score(temp2,distance)
                helper = 1

    for i in range(len(vertices1)-2):
        for j in range(i+1,len(vertices1)-1):

            temp1=swaping_edge(vertices1,vertices1[i],vertices1[j])
            score=calculate_score(temp1,distance)
            if score<score_f1:
                result_f1=temp1
                score_f1=score
                helper=1

            temp2=swaping_edge(vertices2,vertices2[i],vertices2[j])
            score=calculate_score(temp2,distance)
            if score<score_f2:
                result_f2=temp2
                score_f2=score
                helper=1
            
    return result_f1,result_f2,score_f1,score_f2,helper


def steepest2(vertices1,vertices2,distance):
    result_f1 = copy.copy(vertices1)
    result_f2 = copy.copy(vertices2)
    score_f1 = calculate_score(vertices1,distance)
    score_f2=calculate_score(vertices2,distance)
    temp1=[]
    temp2=[]
    score=0
    helper=0
    for i in range(len(vertices1)):
        for j in range(len(vertices1)):

            temp1,temp2 = swaping_cycle(vertices1,vertices2,vertices1[i],vertices2[j])
            if calculate_score(temp1,distance) + calculate_score(temp2,distance) < score_f1 + score_f2:
                result_f1 = temp1
                result_f2 = temp2
                score_f1 = calculate_score(temp1,distance)
                score_f2 = calculate_score(temp2,distance)
                helper = 1

    for i in range(len(vertices1)-2):
        for j in range(i+1,len(vertices1)-1):
            temp1=swaping_vertex(vertices1,vertices1[i],vertices1[j])
            score=calculate_score(temp1,distance)
            if score<score_f1:
                result_f1=temp1
                score_f1=score
                helper=1

            temp2=swaping_vertex(vertices2,vertices2[i],vertices2[j])
            score=calculate_score(temp2,distance)
            if score<score_f2:
                result_f2=temp2
                score_f2=score
                helper=1

    return result_f1,result_f2,score_f1,score_f2,helper

def greedy_p(vertices1,vertices2,distance):
    result_f1 = copy.copy(vertices1)
    result_f2 = copy.copy(vertices2)
    score_f1 = calculate_score(vertices1,distance)
    score_f2=calculate_score(vertices2,distance)
    temp1=copy.copy(vertices1)
    temp2=copy.copy(vertices2)
    score=0
    helper=0
    x=random.randint(1, 3)
    if(x==1):
        for i in range(len(vertices1)):
            for j in range(len(vertices1)):
                temp1,temp2 = swaping_cycle(result_f1,result_f2,result_f1[i],result_f2[j])
                if calculate_score(temp1,distance) + calculate_score(temp2,distance) < score_f1 + score_f2:
                    result_f1 = temp1
                    result_f2 = temp2
                    score_f1 = calculate_score(temp1,distance)
                    score_f2 = calculate_score(temp2,distance)
                    helper = 1

        for i in range(len(vertices1)-2):
            for j in range(i+1,len(vertices1)-1):

                temp1=swaping_edge(result_f1,result_f1[i],result_f1[j])
                score=calculate_score(temp1,distance)
                if score<score_f1:
                    result_f1=temp1
                    score_f1=score
                    helper=1

                temp2=swaping_edge(result_f2,result_f2[i],result_f2[j])
                score=calculate_score(temp2,distance)
                if score<score_f2:
                    result_f2=temp2
                    score_f2=score
                    helper=1

                temp1=swaping_vertex(result_f1,result_f1[i],result_f1[j])
                score=calculate_score(temp1,distance)
                if score<score_f1:
                    result_f1=temp1
                    score_f1=score
                    helper=1

                temp2=swaping_vertex(result_f2,result_f2[i],result_f2[j])
                score=calculate_score(temp2,distance)
                if score<score_f2:
                    result_f2=temp2
                    score_f2=score
                    helper=1
    if(x==2):
        for i in range(len(vertices1)):
            for j in range(len(vertices1)):
                temp1,temp2 = swaping_cycle(result_f1,result_f2,result_f1[i],result_f2[j])
                if calculate_score(temp1,distance) + calculate_score(temp2,distance) < score_f1 + score_f2:
                    result_f1 = temp1
                    result_f2 = temp2
                    score_f1 = calculate_score(temp1,distance)
                    score_f2 = calculate_score(temp2,distance)
                    helper = 1

        for i in range(len(vertices1)-2):
            for j in range(i+1,len(vertices1)-1):

                temp1=swaping_vertex(result_f1,result_f1[i],result_f1[j])
                score=calculate_score(temp1,distance)
                if score<score_f1:
                    result_f1=temp1
                    score_f1=score
                    helper=1
                    
                temp2=swaping_vertex(result_f2,result_f2[i],result_f2[j])
                score=calculate_score(temp2,distance)
                if score<score_f2:
                    result_f2=temp2
                    score_f2=score
                    helper=1

                temp1=swaping_edge(result_f1,result_f1[i],result_f1[j])
                score=calculate_score(temp1,distance)
                if score<score_f1:
                    result_f1=temp1
                    score_f1=score
                    helper=1

                temp2=swaping_edge(result_f2,result_f2[i],result_f2[j])
                score=calculate_score(temp2,distance)
                if score<score_f2:
                    result_f2=temp2
                    score_f2=score
                    helper=1

    if(x==3):
        for i in range(len(vertices1)-2):
            for j in range(i+1,len(vertices1)-1):

                temp1=swaping_edge(result_f1,result_f1[i],result_f1[j])
                score=calculate_score(temp1,distance)
                if score<score_f1:
                    result_f1=temp1
                    score_f1=score
                    helper=1

                temp2=swaping_edge(result_f2,result_f2[i],result_f2[j])
                score=calculate_score(temp2,distance)
                if score<score_f2:
                    result_f2=temp2
                    score_f2=score
                    helper=1

                temp1=swaping_vertex(result_f1,result_f1[i],result_f1[j])
                score=calculate_score(temp1,distance)
                if score<score_f1:
                    result_f1=temp1
                    score_f1=score
                    helper=1

                temp2=swaping_vertex(result_f2,result_f2[i],result_f2[j])
                score=calculate_score(temp2,distance)
                if score<score_f2:
                    result_f2=temp2
                    score_f2=score
                    helper=1

        for i in range(len(vertices1)):
            for j in range(len(vertices1)):
                temp1,temp2 = swaping_cycle(result_f1,result_f2,result_f1[i],result_f2[j])
                if calculate_score(temp1,distance) + calculate_score(temp2,distance) < score_f1 + score_f2:
                    result_f1 = temp1
                    result_f2 = temp2
                    score_f1 = calculate_score(temp1,distance)
                    score_f2 = calculate_score(temp2,distance)
                    helper = 1

        if(x==4):
            for i in range(len(vertices1)-2):
                for j in range(i+1,len(vertices1)-1):

                    temp1=swaping_vertex(result_f1,result_f1[i],result_f1[j])
                    score=calculate_score(temp1,distance)
                    if score<score_f1:
                        result_f1=temp1
                        score_f1=score
                        helper=1

                    temp2=swaping_vertex(result_f2,result_f2[i],result_f2[j])
                    score=calculate_score(temp2,distance)
                    if score<score_f2:
                        result_f2=temp2
                        score_f2=score
                        helper=1

                    temp1=swaping_edge(result_f1,result_f1[i],result_f1[j])
                    score=calculate_score(temp1,distance)
                    if score<score_f1:
                        result_f1=temp1
                        score_f1=score
                        helper=1

                    temp2=swaping_edge(result_f2,result_f2[i],result_f2[j])
                    score=calculate_score(temp2,distance)
                    if score<score_f2:
                        result_f2=temp2
                        score_f2=score
                        helper=1

            for i in range(len(vertices1)):
                for j in range(len(vertices1)):
                    temp1,temp2 = swaping_cycle(result_f1,result_f2,result_f1[i],result_f2[j])
                    if calculate_score(temp1,distance) + calculate_score(temp2,distance) < score_f1 + score_f2:
                        result_f1 = temp1
                        result_f2 = temp2
                        score_f1 = calculate_score(temp1,distance)
                        score_f2 = calculate_score(temp2,distance)
                        helper = 1

    return result_f1,result_f2,score_f1,score_f2,helper
