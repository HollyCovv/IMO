import copy
import math
import random
import time
import matplotlib.pyplot as plt
from statistics import mean
import numpy as np

def load_instance(filename):
    vertices = []
    with open(filename, 'r') as f:
        data = f.readlines()
        data = data[6:-1]
    for line in data:
        vertices.append([int(v) for v in line.split()[1:]])
    return vertices


def get_second_vertex(first_vertex, distance_matrix):
    max_distance = max(distance_matrix[first_vertex])
    return distance_matrix[first_vertex].index(max_distance)


def create_distance_matrix(vertices):
    matrix = []
    for i in vertices:
        line = []
        for j in vertices:
            distance = round(math.sqrt((i[0] - j[0]) ** 2 + (i[1] - j[1]) ** 2))
            line.append(distance)
        matrix.append(line)
    return matrix


def calculate_score(vertices, distance_matrix, cycle=False):
    score = 0
    for i in range(len(vertices) - 1):
        score += distance_matrix[vertices[i]][vertices[i+1]]
    if cycle and len(vertices) > 2:
        score += distance_matrix[vertices[0]][vertices[-1]]
    return score


def get_best_insertion(vertices, vertices2, distance_matrix, position=True, cycle=False):
    best_vertex = None
    best_score = None
    best_position = None

    for i in range(len(distance_matrix)):
        if i in vertices + vertices2:
            continue
        for position in range(len(vertices) + 1):
            temp_vertices = copy.copy(vertices)
            temp_vertices.insert(position, i)
            score = calculate_score(temp_vertices, distance_matrix, cycle=True)
            if best_score is None or score < best_score:
                best_score = score
                best_vertex = i
                best_position = position

    return best_vertex, best_position, best_score


def greedy(distance_matrix, start_vertex=0):
    vertices1 = []
    vertices2 = []
    vertices1.append(start_vertex)
    vertices2.append(get_second_vertex(start_vertex, distance_matrix)) # wybieranie najdaljszego

    matrix_len = len(distance_matrix)

    for l in range(matrix_len - 2):
        if l % 2 == 0:
            vertices = vertices1
        else:
            vertices = vertices2
        best_vertex = None
        best_score = None
        index = None

        for i in vertices:
            for j in range(len(distance_matrix)):
                if i == j or j in vertices1 + vertices2:
                    continue
                score = distance_matrix[i][j]
                if best_score is None or score < best_score:
                    best_score = score
                    best_vertex = j

        vertices.append(best_vertex)
    return vertices1 + vertices1[:1], vertices2 + vertices2[:1]


def greedy_cycle(distance_matrix, start_vertex=0):
    vertices1 = []
    vertices1.append(start_vertex)
    vertices2 = []
    vertices2.append(get_second_vertex(start_vertex, distance_matrix))

    matrix_len = len(distance_matrix)

    for l in range(matrix_len - 2):
        if l % 2 == 0:
            vertices, vertices_2 = vertices1, vertices2
        else:
            vertices, vertices_2 = vertices2, vertices1
        best_vertex, best_position, _ = get_best_insertion(vertices, vertices_2, distance_matrix)
        vertices.insert(best_position, best_vertex)
    return vertices1 + vertices1[:1], vertices2 + vertices2[:1]



def insert(vertices, vertices2, distance_matrix):
    temp = 100000
    v1=0
    v2=0
    for v in vertices:
        for i in range(len(distance_matrix[v])):
            if i not in vertices:
                if i not in vertices2:
                    if distance_matrix[v][i] < temp:
                        temp = distance_matrix[v][i]
                        v1 = i
    temp = 100000
    for v in vertices2:
        for i in range(len(distance_matrix[v])):
            if i not in vertices2:
                if i not in vertices:
                    if i !=v1:
                        if distance_matrix[v][i] < temp:
                            temp = distance_matrix[v][i]
                            v2 = i
    return v1,v2


def plot(instance, data1, data2):
    path1_x = []
    path1_y = []
    
    path2_x = []
    path2_y = []

    for d in data1:
        path1_x.append(instance[d][0])
        path1_y.append(instance[d][1])
    for d in data2:
        path2_x.append(instance[d][0])
        path2_y.append(instance[d][1])

    plt.plot(path1_x, path1_y)
    plt.plot(path2_x, path2_y)
    plt.show()


def local_search(ins,distance_matrix):
    vs1 = random.randint(0, 199)
    vs2 = random.randint(0, 199)
    print(vs1)
    while vs1 == vs2:
        vs2 = random.randint(0, 199)
    print(vs2)
    vertices1 = []
    vertices2 = []
    vertices1.append(vs1)
    vertices2.append(vs2)
    for i in range(99):
        v1,v2 = insert(vertices1,vertices2,distance_matrix)
        vertices1.append(v1)
        vertices2.append(v2)
    vertices1.append(vs1)
    vertices2.append(vs2)
    score = calculate_score(vertices1, distance_matrix, cycle=True) + calculate_score(vertices2, distance_matrix, cycle=True)
    #print(vertices1)
    #print(vertices2)
    #print(score)
    #plot(ins,vertices1,vertices2)
    return vertices1,vertices2,score


class Solution:
    def __init__(self, v1, v2, score):
        self.v1 = v1
        self.v2 = v2
        self.score = score
        self.pod1 = 0
        self.pod2 = 0
        self.pod1b = 0
        self.pod2b = 0


def func1(v1,v2, vb1, vb2):
    score1 = 0
    score2 = 0
    score3 = 0
    score4 = 0
    f1 = 0
    f2 = 0
    for v in v1:
        if v in vb1:
            score1 += 1
        if v in vb2:
            score2 += 1
    for v in v2:
         if v in vb1:
            score3 += 1
         if v in vb2:
            score4 += 1
    if v1[0] in vb1:
        score1 -= 1
    else:
        score2 -=1
    if v2[0] in vb1:
        score3 -=1
    else:
        score4 -=1
    if score1>score2:
        f1 = score1
    else:
        f1 = score2
    if score3>score4:
        f2 = score3
    else:
        f2 = score4
    return f1,f2


def func2(v1,v2, vb1, vb2):
    score1 = 0
    score2 = 0
    for i in range(len(v1)-1):
        score1 += list_contains([v1[i],v1[i+1]],vb1)
        score1 += list_contains([v1[i],v1[i+1]],vb2)
    for i in range(len(v1)-1):
        score2 += list_contains([v2[i],v2[i+1]],vb1)
        score2 += list_contains([v2[i],v2[i+1]],vb2)
    return score1,score2


def list_contains(l1,l2):
    for i in range(len(l2)-1):
        if l2[i] == l1[0]:
            if l2[i+1] == l1[1]:
                return 1
        if l2[i] == l1[1]:
            if l2[i+1] == l1[0]:
                return 1
    return 0


def myFunc(solution):
    return solution.score


def corr(x, y):
    x= np.array(x)
    y= np.array(y)
    meanx = x.mean() 
    meany = y.mean()
    stdx = x.std()
    stdy = y.std()
    corr = ((x*y).mean()-meanx*meany)/(stdx*stdy)
    return corr


def main():
 
    vertices = load_instance('kroB2002.tsp')
    dis = create_distance_matrix(vertices)
    print(len(dis))
    print(dis[0])
    Plx=[]
    Ply=[]
    Ply2=[]
    Ply3=[]
    Ply4=[]

    Sol = []
    
    for i in range(5):
        v1,v2,score = local_search(vertices,dis)
        s = Solution(v1,v2,score)
        Sol.append(copy.deepcopy(s))
    Sol.sort(key=myFunc)
    print(Sol)
    temp = 1000000
    best = 0
    for i in range(5):
        print(i)
        f1,f2 = func1(Sol[i].v1,Sol[i].v2,Sol[best].v1,Sol[best].v2)
        Sol[i].pod1b = f1 + f2

        Plx.append(Sol[i].score)
        Ply.append(Sol[i].pod1b)

        f1,f2 = func2(Sol[i].v1,Sol[i].v2,Sol[best].v1,Sol[best].v2)
        Sol[i].pod2b = f1 + f2
        Ply2.append(Sol[i].pod2b)

        mean = 0
        for j in range(len(Sol)):
            f1,f2 = func1(Sol[i].v1,Sol[i].v2,Sol[j].v1,Sol[j].v2)
            mean +=f1
            mean +=f2
        mean = mean/len(Sol)
        Sol[i].pod1 = mean
        Ply3.append(Sol[i].pod1)

        mean = 0
        for j in range(len(Sol)):
            f1,f2 = func2(Sol[i].v1,Sol[i].v2,Sol[j].v1,Sol[j].v2)
            mean +=f1
            mean +=f2
        mean = mean/len(Sol)
        Sol[i].pod2 = mean
        Ply4.append(Sol[i].pod2)

    print(Ply)
    print(corr(Plx,Ply))
    print(Ply2)
    print(corr(Plx,Ply2))
    print(Ply3)
    print(corr(Plx,Ply3))
    print(Ply4)
    print(corr(Plx,Ply4))
    plt.plot(Plx, Ply,  'ro',markersize=4)
    plt.show()
    plt.plot(Plx, Ply2, 'ro', markersize=4)
    plt.show()
    plt.plot(Plx, Ply3, 'ro',markersize=4)
    plt.show()
    plt.plot(Plx, Ply4, 'ro',markersize=4)
    plt.show()
if __name__ == "__main__":
    main()
